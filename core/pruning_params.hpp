#include <cassert>
#include <vector>

#include "types.hpp"

/**
 * The following pruning parameters are taken by using the Pruner from [1],
 * on bases that are preprocessed with SeysenLLL's DeepLLL implementation with
 * depth parameter equal to 4 and dimension 256.
 *
 * Pruner ran with:
 * - precision 256 bits,
 * - precomputation cost 2**30,
 * - desired success probability >= 0.80,
 * - flags=Pruning.ZEALOUS,
 * - float_type='mpfr'.
 *
 * [1] https://github.com/fplll/fplll
 */
const std::vector<FT> pruning_params[32 + 1] = {
    {}, {}, // dummy values

	{1.0, 1.000}, // BKZ-2, p=1.000000
	{1.0, 1.000, 1.000}, // BKZ-3, p=1.000000
	{1.0, 0.600, 0.600, 0.600}, // BKZ-4, p=0.801454
	{1.0, 1.000, 1.000, 0.980, 0.980}, // BKZ-5, p=0.984912
	{1.0, 0.776, 0.776, 0.776, 0.776, 0.766}, // BKZ-6, p=0.804140
	{1.0, 1.000, 1.000, 0.980, 0.980, 0.980, 0.980}, // BKZ-7, p=0.970044
	{1.0, 0.841, 0.841, 0.841, 0.841, 0.841, 0.841, 0.831}, // BKZ-8, p=0.801653
	{1.0, 1.000, 1.000, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980}, // BKZ-9, p=0.955392
	{1.0, 0.876, 0.876, 0.876, 0.876, 0.876, 0.876, 0.876, 0.876, 0.872}, // BKZ-10, p=0.800151
	{1.0, 1.000, 1.000, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980}, // BKZ-11, p=0.940954
	{1.0, 0.908, 0.908, 0.908, 0.908, 0.908, 0.908, 0.908, 0.908, 0.908, 0.908, 0.898}, // BKZ-12, p=0.817110
	{1.0, 1.000, 1.000, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980}, // BKZ-13, p=0.926726
	{1.0, 0.917, 0.917, 0.917, 0.917, 0.917, 0.917, 0.917, 0.917, 0.917, 0.917, 0.917, 0.917, 0.908}, // BKZ-14, p=0.806581
	{1.0, 1.000, 1.000, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980}, // BKZ-15, p=0.912706
	{1.0, 0.932, 0.932, 0.932, 0.932, 0.932, 0.932, 0.932, 0.932, 0.932, 0.932, 0.932, 0.932, 0.932, 0.932, 0.922}, // BKZ-16, p=0.817189
	{1.0, 1.000, 1.000, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980}, // BKZ-17, p=0.898890
	{1.0, 0.944, 0.944, 0.944, 0.944, 0.944, 0.944, 0.944, 0.944, 0.944, 0.944, 0.944, 0.944, 0.944, 0.944, 0.944, 0.944, 0.934}, // BKZ-18, p=0.826947
	{1.0, 1.000, 1.000, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980}, // BKZ-19, p=0.885276
	{1.0, 0.949, 0.949, 0.949, 0.949, 0.949, 0.949, 0.949, 0.949, 0.949, 0.949, 0.949, 0.949, 0.949, 0.949, 0.949, 0.949, 0.949, 0.949, 0.939}, // BKZ-20, p=0.825511
	{1.0, 1.000, 1.000, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980}, // BKZ-21, p=0.871860
	{1.0, 0.961, 0.951, 0.945, 0.945, 0.945, 0.945, 0.945, 0.945, 0.945, 0.945, 0.945, 0.945, 0.945, 0.945, 0.945, 0.945, 0.945, 0.945, 0.945, 0.945, 0.945}, // BKZ-22, p=0.811140
	{1.0, 1.000, 1.000, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980}, // BKZ-23, p=0.858641
	{1.0, 0.957, 0.957, 0.950, 0.950, 0.950, 0.950, 0.950, 0.950, 0.950, 0.950, 0.950, 0.950, 0.950, 0.950, 0.950, 0.950, 0.950, 0.950, 0.950, 0.950, 0.950, 0.950, 0.950}, // BKZ-24, p=0.823166
	{1.0, 1.000, 1.000, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980}, // BKZ-25, p=0.845615
	{1.0, 0.966, 0.965, 0.955, 0.953, 0.953, 0.953, 0.953, 0.953, 0.953, 0.953, 0.953, 0.953, 0.953, 0.953, 0.953, 0.953, 0.953, 0.953, 0.953, 0.953, 0.953, 0.953, 0.953, 0.953, 0.953}, // BKZ-26, p=0.837665
	{1.0, 1.000, 1.000, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980}, // BKZ-27, p=0.832780
	{1.0, 0.966, 0.964, 0.957, 0.957, 0.957, 0.957, 0.957, 0.957, 0.957, 0.957, 0.957, 0.957, 0.957, 0.957, 0.957, 0.957, 0.957, 0.957, 0.957, 0.957, 0.957, 0.957, 0.957, 0.957, 0.957, 0.957, 0.957}, // BKZ-28, p=0.826162
	{1.0, 1.000, 1.000, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980}, // BKZ-29, p=0.820133
	{1.0, 0.965, 0.965, 0.959, 0.959, 0.959, 0.959, 0.959, 0.959, 0.959, 0.959, 0.959, 0.959, 0.959, 0.959, 0.959, 0.959, 0.959, 0.959, 0.959, 0.959, 0.959, 0.959, 0.959, 0.959, 0.959, 0.959, 0.959, 0.959, 0.959}, // BKZ-30, p=0.821471
	{1.0, 1.000, 1.000, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980}, // BKZ-31, p=0.807671
	{1.0, 1.000, 0.981, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980, 0.980}, // BKZ-32, p=0.800489
};

const FT* get_pruning_coefficients(const int block_size) {
	assert(2 <= block_size && block_size <= 32);
	return &pruning_params[block_size][0];
}

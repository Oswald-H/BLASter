#include <cassert>
#include <vector>

#include "types.hpp"

/**
 * The following pruning parameters are taken by using the Pruner from [1],
 * on bases that are preprocessed with SeysenLLL's DeepLLL implementation with
 * depth parameter equal to 4 and dimension 256.
 *
 * Pruner ran with:
 * - precision 256 bits,
 * - precomputation cost 2**30,
 * - desired success probability >= 0.80,
 * - flags=Pruning.ZEALOUS,
 * - float_type='mpfr'.
 *
 * [1] https://github.com/fplll/fplll
 */
const std::vector<FT> pruning_params[64/2 + 1] = {
    {}, // dummy values
	{1,.0001}, // BKZ-2, p=1.000000
	{1,.6,.6,.59}, // BKZ-4, p=0.801278
	{1,.782,.782,.782,.782,.772}, // BKZ-6, p=0.809014
	{1,.845,.845,.845,.845,.845,.845,.835}, // BKZ-8, p=0.806276
	{1,.879,.879,.879,.879,.879,.879,.879,.879,.87}, // BKZ-10, p=0.804041
	{1,.9,.9,.9,.9,.9,.9,.9,.9,.9,.9,.898}, // BKZ-12, p=0.802451
	{1,.923,.923,.923,.923,.923,.923,.923,.923,.923,.923,.923,.923,.913}, // BKZ-14, p=0.819358
	{1,.929,.929,.929,.929,.929,.929,.929,.929,.929,.929,.929,.929,.929,.929,.921}, // BKZ-16, p=0.810283
	{1,.942,.942,.942,.942,.942,.942,.942,.942,.942,.942,.942,.942,.942,.942,.942,.942,.932}, // BKZ-18, p=0.822958
	{1,.948,.948,.948,.948,.948,.948,.948,.948,.948,.948,.948,.948,.948,.948,.948,.948,.948,.948,.939}, // BKZ-20, p=0.823662
	{1,.946,.946,.946,.946,.946,.946,.946,.946,.946,.946,.946,.946,.946,.946,.946,.946,.946,.946,.946,.946,.945}, // BKZ-22, p=0.802806
	{1,.951,.951,.95,.95,.95,.95,.95,.95,.95,.95,.95,.95,.95,.95,.95,.95,.95,.95,.95,.95,.95,.95,.95}, // BKZ-24, p=0.804840
	{1,.965,.96,.953,.953,.953,.953,.953,.953,.953,.953,.953,.953,.953,.953,.953,.953,.953,.953,.953,.953,.953,.953,.953,.953,.953}, // BKZ-26, p=0.820150
	{1,.967,.966,.957,.957,.957,.957,.957,.957,.957,.957,.957,.957,.957,.957,.957,.957,.957,.957,.957,.957,.957,.957,.957,.957,.957,.957,.957}, // BKZ-28, p=0.833949
	{1,.966,.965,.959,.959,.959,.959,.959,.959,.959,.959,.959,.959,.959,.959,.959,.959,.959,.959,.959,.959,.959,.959,.959,.959,.959,.959,.959,.959,.959}, // BKZ-30, p=0.822913
	{1,1,.981,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98}, // BKZ-32, p=0.800003
	{1,1,.983,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98}, // BKZ-34, p=0.800001
	{1,1,.982,.982,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98}, // BKZ-36, p=0.800027
	{1,1,.983,.983,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98}, // BKZ-38, p=0.800174
	{1,1,.985,.983,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98}, // BKZ-40, p=0.800007
	{1,1,.984,.984,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.96,.96,.925,.925,.876,.876,.876,.876,.876,.876,.876,.876,.876,.876,.876,.876,.876,.876,.876,.876,.876,.876,.876,.876,.876,.876}, // BKZ-42, p=0.802265
	{1,1,.986,.986,.98,.98,.98,.98,.98,.98,.98,.98,.98,.98,.955,.955,.886,.886,.839,.839,.81,.81,.783,.783,.771,.771,.771,.771,.771,.771,.771,.771,.771,.771,.771,.771,.771,.771,.771,.771,.771,.771,.771,.771}, // BKZ-44, p=0.814887
	{1,1,.988,.988,.98,.98,.98,.98,.98,.98,.98,.98,.964,.964,.894,.894,.846,.846,.785,.785,.743,.743,.718,.718,.679,.679,.679,.679,.679,.679,.679,.679,.679,.679,.679,.679,.679,.679,.679,.679,.679,.679,.679,.679,.679,.679}, // BKZ-46, p=0.807916
	{1,1,1,1,1,1,.98,.98,.98,.98,.98,.98,.915,.915,.849,.849,.804,.804,.745,.745,.702,.702,.655,.655,.632,.632,.598,.598,.598,.598,.598,.598,.598,.598,.598,.598,.598,.598,.598,.598,.598,.598,.598,.598,.598,.598,.598,.598}, // BKZ-48, p=0.800018
	{1,1,1,1,.999,.999,.98,.98,.98,.98,.959,.942,.908,.895,.872,.847,.82,.795,.769,.747,.726,.71,.692,.68,.66,.641,.629,.615,.597,.58,.559,.559,.559,.559,.559,.559,.559,.559,.559,.559,.559,.559,.559,.559,.559,.559,.559,.559,.559,.559}, // BKZ-50, p=0.800028
	{1,1,1,1,1,1,.999,.999,.984,.974,.95,.943,.91,.904,.869,.865,.825,.822,.783,.78,.742,.738,.702,.698,.665,.649,.63,.624,.598,.592,.571,.558,.549,.549,.549,.549,.549,.549,.549,.549,.549,.549,.549,.549,.549,.549,.549,.549,.549,.549,.549,.549}, // BKZ-52, p=0.800002
	{1,1,1,1,1,1,.999,.998,.981,.979,.954,.951,.918,.915,.877,.874,.834,.832,.792,.789,.75,.748,.711,.709,.674,.673,.641,.639,.611,.608,.579,.579,.559,.552,.532,.527,.514,.505,.503,.503,.503,.503,.503,.503,.503,.503,.503,.503,.503,.503,.503,.503,.503,.503}, // BKZ-54, p=0.794269
	{1,1,1,1,1,1,.995,.992,.972,.97,.936,.936,.893,.893,.846,.846,.799,.799,.752,.752,.707,.707,.666,.665,.627,.626,.592,.592,.56,.56,.532,.532,.506,.506,.487,.482,.467,.46,.44,.44,.439,.439,.439,.439,.439,.439,.439,.439,.439,.439,.439,.439,.439,.439,.439,.439}, // BKZ-56, p=0.542090
	{1,1,1,1,1,1,.989,.988,.963,.96,.92,.918,.871,.87,.82,.818,.77,.767,.722,.717,.674,.671,.63,.626,.59,.587,.553,.553,.521,.519,.492,.491,.467,.465,.445,.442,.421,.42,.407,.401,.385,.385,.385,.385,.385,.385,.385,.385,.385,.385,.385,.385,.385,.385,.385,.385,.385,.385}, // BKZ-58, p=0.299669
	{1,1,1,1,1,1,.985,.985,.953,.951,.906,.903,.852,.849,.798,.795,.744,.741,.693,.69,.644,.642,.6,.598,.559,.558,.522,.521,.49,.488,.46,.459,.433,.432,.411,.409,.392,.388,.37,.369,.358,.352,.336,.336,.336,.336,.336,.336,.336,.336,.336,.336,.336,.336,.336,.336,.336,.336,.336,.336}, // BKZ-60, p=0.140662
	{1,1,1,1,1,1,.982,.98,.942,.942,.893,.89,.837,.833,.779,.776,.723,.719,.67,.667,.621,.618,.575,.573,.533,.531,.496,.495,.464,.462,.433,.432,.406,.405,.383,.382,.362,.361,.345,.342,.326,.325,.309,.309,.296,.296,.296,.296,.296,.296,.296,.296,.296,.296,.296,.296,.296,.296,.296,.296,.296,.296}, // BKZ-62, p=0.056517
	{1,1,1,1,1,1,.979,.979,.936,.934,.879,.877,.819,.817,.759,.758,.702,.701,.649,.647,.599,.598,.553,.552,.512,.511,.475,.474,.44,.439,.41,.41,.384,.383,.36,.359,.338,.338,.32,.319,.302,.302,.286,.286,.275,.275,.263,.262,.262,.262,.262,.262,.262,.262,.262,.262,.262,.262,.262,.262,.262,.262,.262,.262} // BKZ-64, p=0.019764
};

const FT* get_pruning_coefficients(const int block_size) {
	assert(2 <= block_size && block_size <= 64);
	return &pruning_params[(block_size + 1) / 2][0];
}
